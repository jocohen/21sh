Comportement des redirections et agregation:
 
 Todo for 21sh / 42sh:

	REDIRECTION:

	21sh -> `>`: (X > Z) (X>Z) (info: X>Z X fd = 1 si ndef Z = file)
		permet ecrire le resultat de la commande X (fd = 1) dans Z.
		si Z n'existe pas, il le creer
		si il existe il afface son contenu avant la copie
		si X n'existe pas, laisse ecrire le  text a inserer jusque fin ctrl D/C
		si X == : , vide Z

	21sh ->	`>>`: (X >> Z) (X>>Z) aussi `>>&`
		permet ecrire le resultat de la commande X (fd = 1) dans Z.
		si Z n'existe pas, il le creer
		si il existe, il ecrit sur une nouvelle ligne a la fin du Z

	21sh ->	`<`: (X < Z) (X<Z) aussi `<<<` `<>`
		permet d'envoyer le contenu de Z (etant un file) vers X
		si Z different de file/directory -> no such file or directory: `name`

	21sh ->	`<<`: (X << Z) (X<<Z)
		permet d'ouvrir un prompt `heredoc`, Z etant le mot clÃ© pour fermer le heredoc.
		si X n'existe pas faire comme `cat` sinon executer X
		Pour cloturer le `heredoc`, ecrire Z seulement sur une ligne


	with fd:

	21sh ->	`1>`:
		meme que `>`
	21sh ->	`1>>`:
		meme que `>>`

	21sh ->	`2>`:
		comme `>`, mais seulement pour les erreurs (2 = stderr)
		affiche tout fd = 1 (stdout)
	21sh ->	`2>>`:
		comme `>>`, mais seulemet pour les erreurs (2 = stderr)
		affiche tout fd = 1 (stdout)

	Value:
		if no error $? = 0 else $? = 1


	AGREGATION:


	21sh ->	`&>`: (X&>Z) (X &> Z)
		permet d'ecrire stdout et stderr dans le fichier Z

	21sh ->	`&>>`: == `&>`
		permet d'ecrire stdout et stderr a la fin du fichier Z

	21sh ->	`>&`: (X&>Z) (info: X fd, if ndef X = 1 et Z fd)
		redirge fdX vers fdZ

	FERMETURE FD:

	21sh ->	`X<&-`:
		ferme le descripteur de fichier X.

	21sh ->	`0<&-` 0u `<&-`:
		ferme entrer standard

	21sh ->	`X>&-`:
		ferme le descripteur de fichier de sortie X

	21sh ->	`1>&-` 0u `>&-`:
		ferme la sortie standard


	INFO:
		Pour &< :
		 cmd avant &, execution en back
		 cat after <.

		Pour &<< :
		 cmd avant &, execution en back
		 cat heredoc after <<.

		 Pour <& :
		  Only avec -
		  exemple <&- ou 1<&-
		  if no - -> parse error near `\n'

		 Pour <<& :
		  parse error near `&'

		 Error:
		 	parse error near `2 char left after the last correct one'

(cf: https://abs.traduc.org/abs-5.3-fr/ch19.html)
